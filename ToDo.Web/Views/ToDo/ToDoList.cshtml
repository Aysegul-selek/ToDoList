@model List<ToDoAPI.Entities.DTOs.ToDo.TodoDto>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ToDo List</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="~/ToDo.Web.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.4.55/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        body {
    overflow-x: hidden;
}

        /* Modal stilini ekleyelim */
        .modal {
            display: none; /* Başlangıçta görünmez */
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgb(0, 0, 0); /* Fonda koyu renk */
            background-color: rgba(0, 0, 0, 0.4); /* Şeffaflık ekleyelim */
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Modal genişliği */
            max-width: 500px; /* Maksimum genişlik */
            border-radius: 10px; /* Yuvarlatılmış köşeler */
            position: relative; /* Çarpıyı konumlandırabilmek için */
        }

        .close {
            color: green;
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

            .close:hover,
            .close:focus {
                color: black;
                text-decoration: none;
            }
        /* Yorum ekleme stil */
        textarea {
            width: 100%;
            padding: 10px;
            border-radius: 10px;
            border: 1px solid green; /* İlk renk */
            background-color: #fafafa; /* Açık gri arka plan */
            transition: 0.4s linear;
            resize: none;
        }

            /* Hover durumunda pembe renk yerine yeşil tonlarında renk */
            textarea:hover {
                border-color: #2e9e2d; /* Yeşil */
                background-color: #f1f1f1; /* Daha açık gri */
            }

            /* Focus durumunda odaklanıldığında yeşil bir ton kullan */
            textarea:focus {
                border-color: lightgreen;
                background-color: #e0e0e0; /* Hafif gri */
                color: black; /* Yazı rengini siyah yap */
            }

        /* Modal butonları */
        .modal-buttons {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 50px;
            transition: 0.4s linear;
            cursor: pointer;
            width: 48%;
        }

        .save-btn {
            background-color: #6f4f37; /* Kahverengi */
            color: white;
        }

            .save-btn:hover {
                background-color: #8e6e54; /* Açık kahverengi */
            }

        .cancel-btn {
            background-color: #228b22; /* Yeşil */
            color: white;
        }

            .cancel-btn:hover {
                background-color: #2e9e2d; /* Daha koyu yeşil */
            }

        /* Popup ve Footer */
        .footer {
            padding-top: 235px;
        }


    media (max-width: 768px) {
    .tasks {
        flex: 1 1 100%; /* Mobilde tüm satırı kaplar */
    }
}

        .page-title-box .page-title {
            font-size: 18px;
            line-height: 75px;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        .page-title {
            margin-left: 100px;
        }

        .board {
            display: contents;
            gap: 1rem;
            justify-content: center; 
        }

        a {
            text-decoration: none !important;
        }

        .tasks:not(:last-child) {
            margin-right: 1.25rem;
        }

        .tasks {
            display: inline-block;
            width: 20rem;
            padding: 0 1rem 1rem 1rem;
            border: 1px solid #eef2f7;
            vertical-align: top;
            margin-bottom: 1.5rem;
            border-radius: 0.25rem;
        }

            .tasks .task-header {
                background-color: #f6f7fb;
                padding: 1rem;
                margin: 0 -1rem;
                font-size: 15px;
                font-weight: 500;
            }

        .task-list-items {
            min-height: 100px;
            position: relative;
        }

            .task-list-items:before {
                position: absolute;
                line-height: 110px;
                width: 100%;
                text-align: center;
                font-weight: 600;
                color: rgb(165, 165, 165);
            }

        .tasks .card {
            white-space: normal;
            margin-top: 1rem;
            border: 1px solid #eee;
            border-left-width: 0.25rem;
            white-space: normal;
            margin-top: 1rem;
        }

        .card {
            -webkit-box-shadow: 0px 0px 35px 0px rgba(154, 161, 171, 0.15);
            box-shadow: 0px 0px 35px 0px rgba(154, 161, 171, 0.15);
            margin-bottom: 1.5rem;
        }

        .card-body {
            -webkit-box-flex: 1;
            -ms-flex: 1 1 auto;
            flex: 1 1 auto;
            padding: 1.5rem 1.5rem;
            color: white !important;
        }

        .card-title {
            margin-bottom: 10px !important;
            font-weight: 500;
            font-size: 16px !important;
            cursor: pointer;
        }

        .title {
            text-decoration: line-through;
        }

        .text-body {
            opacity: 1;
            color: rgba(108,117,125), 1 !important;
        }

        .dropdown-toggle {
            display: none !important;
        }

        .avatar-xs {
            height: 1.6rem;
            width: 1.6rem;
        }
    </style>
</head>
<body>
    <div class="wrapper">
        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12 d-flex justify-content-center">
                        <div class="board">
                            <!-- TODO Column -->
                            <div class="tasks" data-status="ToDo">
                                <h5 class="mt-0 task-header" id="todo-header">TODO (0)</h5>
                                <div id="task-list-one" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.ToDo.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: lightgreen;" data-todo-id="@todo.TodoId" data-status="ToDo">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn" data-toggle="modal" data-target="#commentModal@todo.TodoId"></i> <b>@todo.Description</b>

                                                    </span>
                                                   
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- IN PROGRESS Column -->
                            <div class="tasks" data-status="Planning">
                                <h5 class="mt-0 task-header" id="progress-header">Planning (0)</h5>
                                <div id="task-list-two" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.Planning.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: skyblue;" data-todo-id="@todo.TodoId" data-status="Planning">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn" data-toggle="modal" data-target="#commentModal@todo.TodoId"></i> <b>@todo.Description</b>
                                                      
                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- IN PROGRESS Column -->
                            <div class="tasks" data-status="InProgress">
                                <h5 class="mt-0 task-header" id="inprogress-header">InProgress (0)</h5>
                                <div id="task-list-three" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.InProgress.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: violet;" data-todo-id="@todo.TodoId" data-status="InProgress">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn" data-toggle="modal" data-target="#commentModal@todo.TodoId"></i> <b>@todo.Description</b>

                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- DONE Column -->
                            <div class="tasks" data-status="Done">
                                <h5 class="mt-0 task-header" id="done-header">Done</h5>
                                <div id="task-list-four" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.Done.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: green;" data-todo-id="@todo.TodoId" data-status="Done">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary" style="text-decoration: line-through;">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn" data-toggle="modal" data-target="#commentModal@todo.TodoId"></i> <b>@todo.Description</b>

                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @foreach (var todo in Model)
    {
        <div class="todo-item">
            <h3>@todo.Title</h3>
            <button onclick="addComment('@todo.TodoId')" class="add-comment-btn">Add Comment</button>

            <!-- Card için yorum ekleme alanı -->
            <textarea id="comment-text-@todo.TodoId" placeholder="Add your comment here..."></textarea>
            <button onclick="saveComment('@todo.TodoId')" class="save-comment-btn">Save</button>
        </div>
    }





    <footer class="footer">
    </footer>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
             const modal = document.getElementById("commentModal");
             const commentBtn = document.querySelectorAll('.comment-btn');
             const closeBtn = document.querySelector(".close");
             const saveCommentBtn = document.getElementById("saveCommentBtn");
             const cancelCommentBtn = document.getElementById("cancelCommentBtn");
             let currentTodoId = null;

             // Show Modal on Comment Button Click
             commentBtn.forEach(button => {
                 button.addEventListener('click', function() {
                     currentTodoId = button.getAttribute('data-todo-id');
                     modal.style.display = "block";
                 });
             });

             // Close Modal
             closeBtn.addEventListener('click', function () {
                 modal.style.display = "none";
             });

             // Cancel Button - Close Modal
             cancelCommentBtn.addEventListener('click', function () {
                 modal.style.display = "none";
             });

             // Save Comment Button
             saveCommentBtn.addEventListener('click', function () {
                 const commentText = document.getElementById("commentText").value;

                 if (commentText.trim()) {
                     $.ajax({
                         type: 'POST',
                         url: `https://localhost:44305/api/Todo/${currentTodoId}/comment`,
                         data: JSON.stringify({ comment: commentText }),
                         contentType: 'application/json',
                         success: function (response) {
                             console.log("Comment saved:", response);
                             modal.style.display = "none";
                         },
                         error: function () {
                             alert("Failed to save comment");
                         }
                     });
                 } else {
                     alert("Please enter a comment.");
                 }
             });
         });
        document.addEventListener("DOMContentLoaded", function () {
            let draggingCard = null;

            // Kolonlar
            const taskLists = document.querySelectorAll(".task-list-items");

            // Her bir card elementini sürüklenebilir yapmak
            document.querySelectorAll('.card').forEach(card => {
                card.setAttribute('draggable', true);

                card.addEventListener('dragstart', function (e) {
                    draggingCard = e.target;
                });
            });

            // Her kolon için dragover ve drop event'lerini eklemek
            taskLists.forEach(taskList => {
                taskList.addEventListener('dragover', function (e) {
                    e.preventDefault(); // Dragging sırasında geçici engellemeyi kaldırır
                });

                taskList.addEventListener('drop', function (e) {
                    e.preventDefault();

                    if (draggingCard) {
                        taskList.appendChild(draggingCard);
                        const todoId = draggingCard.getAttribute('data-todo-id');
                        const newStatus = e.target.closest('.tasks').getAttribute('data-status');
                        updateStatus(todoId, newStatus);
                    }
                });
            });

            // Görev durumunu güncelleme (PUT metodu ile)
            function updateStatus(todoId, newStatus) {
                $.ajax({
                    type: 'PUT', // PUT isteği kullanıyoruz
                    url: `https://localhost:44305/api/Todo/${todoId}/status?status=${newStatus}`,
                    success: function (response) {
                        // İşlem başarılı
                        console.log('Durum güncellendi:', response);
                    },
                    error: function () {
                        // Hata durumunda
                        alert('Durum güncellenemedi.');
                    }
                });
            }
        });
                document.addEventListener("DOMContentLoaded", function () {
            // Yorum ekleme işlemi
            function saveComment(todoId) {
                const commentText = document.getElementById("comment-text-" + todoId).value; // Yorum text'ini al
                if (commentText) {
                    $.ajax({
                        url: `https://localhost:44305/api/Todo/${todoId}/description`,  // API URL
                        type: 'PUT',
                        contentType: 'application/json',
                        data: JSON.stringify({ description: commentText }), // JSON formatında gönder
                        success: function (response) {
                            alert("Comment saved successfully!");  // Başarı mesajı
                            // Sayfayı yenilemeden de yorum eklenebilir.
                            location.reload();    // Sayfayı yenile
                        },
                        error: function (error) {
                            alert("Error saving comment: " + error.responseJSON.message);  // Hata mesajı
                        }
                    });
                } else {
                    alert("Please enter a comment.");
                }
            }
        });
thub 
    </script>
</body>
</html>
