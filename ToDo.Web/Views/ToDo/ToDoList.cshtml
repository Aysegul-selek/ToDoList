@model List<ToDoAPI.Entities.DTOs.ToDo.TodoDto>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ToDo List</title>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <link rel="stylesheet" href="~/ToDo.Web.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.materialdesignicons.com/5.4.55/css/materialdesignicons.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        .btn-warning {
            background-color: #FFA500; 
            border-color: #FFA500; 
            color: white; 
        }

            .btn-warning:hover {
                background-color: #FF8C00; 
                border-color: #FF8C00; 
            }

        .modal-content {
            border-radius: 10px; 
        }

        .modal-header {
            background-color: #8B4513; 
            color: black; 
            border-top-left-radius: 10px; 
            border-top-right-radius: 10px; 
            display: flex;
            justify-content: space-between; 
            align-items: center; 
        }

        .modal-footer button {
            font-weight: bold; 
            text-transform: uppercase; 
        }

        .form-control {
            border-radius: 8px; 
            background-color: #f1f1f1; 
            border: 1px solid #ccc; 
        }

            .form-control:focus {
                border-color: #FFA500;
                box-shadow: 0 0 5px rgba(255, 165, 0, 0.5); 
            }
        body {
    overflow-x: hidden;
}

        .footer {
            padding-top: 235px;
        }
    media (max-width: 768px) {
    .tasks {
        flex: 1 1 100%; 
    }
}

        .page-title-box .page-title {
            font-size: 18px;
            line-height: 75px;
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
        }

        .page-title {
            margin-left: 100px;
        }

        .board {
            display: contents;
            gap: 1rem;
            justify-content: center; 
        }

        a {
            text-decoration: none !important;
        }

        .tasks:not(:last-child) {
            margin-right: 1.25rem;
        }

        .tasks {
            display: inline-block;
            width: 20rem;
            padding: 0 1rem 1rem 1rem;
            border: 1px solid #eef2f7;
            vertical-align: top;
            margin-bottom: 1.5rem;
            border-radius: 0.25rem;
        }

            .tasks .task-header {
                background-color: #C1DE7E;
                padding: 1rem;
                margin: 0 -1rem;
                font-size: 15px;
                font-weight: 500;
            }

        .task-list-items {
            min-height: 100px;
            position: relative;
        }

            .task-list-items:before {
                position: absolute;
                line-height: 110px;
                width: 100%;
                text-align: center;
                font-weight: 600;
                color: rgb(165, 165, 165);
            }

        .tasks .card {
            white-space: normal;
            margin-top: 1rem;
            border: 1px solid #eee;
            border-left-width: 0.25rem;
            white-space: normal;
            margin-top: 1rem;
        }

        .card {
            -webkit-box-shadow: 0px 0px 35px 0px rgba(154, 161, 171, 0.15);
            box-shadow: 0px 0px 35px 0px rgba(154, 161, 171, 0.15);
            margin-bottom: 1.5rem;
        }

        .card-body {
            -webkit-box-flex: 1;
            -ms-flex: 1 1 auto;
            flex: 1 1 auto;
            padding: 1.5rem 1.5rem;
            color: white !important;
        }

        .card-title {
            margin-bottom: 10px !important;
            font-weight: 500;
            font-size: 16px !important;
            cursor: pointer;
        }

        .title {
            text-decoration: line-through;
        }

        .text-body {
            opacity: 1;
            color: rgba(108,117,125), 1 !important;
        }

        .dropdown-toggle {
            display: none !important;
        }

        .avatar-xs {
            height: 1.6rem;
            width: 1.6rem;
        }
    </style>
</head>
<body>
    <a href="/Todo/Create" class="btn btn-primary" style="margin-bottom: 15px;">Create</a>
    <br />
    <div class="wrapper">
        <div class="content">
            <div class="container-fluid">
                <div class="row">
                    <div class="col-12 d-flex justify-content-center">
                        <div class="board">
                            <!-- TODO Column -->
                            <div class="tasks" data-status="ToDo">
                               <h5 class="mt-0 task-header" id="todo-header">TODO (@Model.Count(t => t.Status == "ToDo"))</h5>
                                <div id="task-list-one" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.ToDo.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: lightgreen;" data-todo-id="@todo.TodoId" data-status="ToDo">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn"
                                                           data-todo-id="@todo.TodoId"
                                                           data-description="@todo.Description">
                                                        </i>
                                                        <b>@todo.Description</b>
                                                    </span>
                                                   
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- IN PROGRESS Column -->
                            <div class="tasks" data-status="Planning">
                                <h5 class="mt-0 task-header" id="progress-header">Planning (0)</h5>
                                <div id="task-list-two" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.Planning.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: skyblue;" data-todo-id="@todo.TodoId" data-status="Planning">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn"
                                                           data-todo-id="@todo.TodoId"
                                                           data-description="@todo.Description">
                                                        </i>
                                                        <b>@todo.Description</b>
                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- IN PROGRESS Column -->
                            <div class="tasks" data-status="InProgress">
                                <h5 class="mt-0 task-header" id="inprogress-header">InProgress (0)</h5>
                                <div id="task-list-three" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.InProgress.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: violet;" data-todo-id="@todo.TodoId" data-status="InProgress">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn"
                                                           data-todo-id="@todo.TodoId"
                                                           data-description="@todo.Description">
                                                        </i>
                                                        <b>@todo.Description</b>
                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- DONE Column -->
                            <div class="tasks" data-status="Done">
                                <h5 class="mt-0 task-header" id="done-header">Done</h5>
                                <div id="task-list-four" class="task-list-items">
                                    @foreach (var todo in Model.Where(t => t.Status == ToDoAPI.Entities.Enums.StatusEnum.Done.ToString()))
                                    {
                                        <div class="card mb-0" id="card@todo.TodoId" style="border-left-color: green;" data-todo-id="@todo.TodoId" data-status="Done">
                                            <div class="card-body p-3">
                                                <h5 class="mt-2 card-title text-secondary" style="text-decoration: line-through;">@todo.Title</h5>
                                                <p class="mb-0 text-secondary">
                                                    <span class="pe-2 text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-briefcase-outline text-muted"></i> @todo.UserName
                                                    </span>
                                                    <span class="text-nowrap mb-2 d-inline-block">
                                                        <i class="mdi mdi-comment-multiple-outline text-muted comment-btn"
                                                           data-todo-id="@todo.TodoId"
                                                           data-description="@todo.Description">
                                                        </i>
                                                        <b>@todo.Description</b>
                                                    </span>
                                                </p>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="commentModal" tabindex="-1" role="dialog" aria-labelledby="commentModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header" style="background-color: #8B4513; color: white;">
                    <h5 class="modal-title" id="commentModalLabel">Yorum Ekle</h5>
                    <!-- X butonunu sağa yerleştirdik ve rengini değiştirdik -->
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" style="color: white; font-size: 1.5rem; background: none; border: none;">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="commentForm">
                        <input type="hidden" id="todoId" name="todoId">
                        <div class="form-group">
                            <label for="comment">Yorum</label>
                            <textarea class="form-control" id="comment" name="comment" rows="4" placeholder="Yorumunuzu buraya yazın..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-warning" id="saveCommentBtn">Yorumu Kaydet</button>
                </div>
            </div>
        </div>
    </div>

    <footer class="footer">
    </footer>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let draggingCard = null;

            // Kolonlar
            const taskLists = document.querySelectorAll(".task-list-items");

            // Her bir card elementini sürüklenebilir yapmak
            document.querySelectorAll('.card').forEach(card => {
                card.setAttribute('draggable', true);

                card.addEventListener('dragstart', function (e) {
                    draggingCard = e.target;
                });
            });

            // Her kolon için dragover ve drop event'lerini eklemek
            taskLists.forEach(taskList => {
                taskList.addEventListener('dragover', function (e) {
                    e.preventDefault(); // Dragging sırasında geçici engellemeyi kaldırır
                });

                taskList.addEventListener('drop', function (e) {
                    e.preventDefault();

                    if (draggingCard) {
                        taskList.appendChild(draggingCard);
                        const todoId = draggingCard.getAttribute('data-todo-id');
                        const newStatus = e.target.closest('.tasks').getAttribute('data-status');
                        updateStatus(todoId, newStatus);
                    }
                });
            });

            // Görev durumunu güncelleme (PUT metodu ile)
            function updateStatus(todoId, newStatus) {
                $.ajax({
                    type: 'PUT', // PUT isteği kullanıyoruz
                    url: `https://localhost:44305/api/Todo/${todoId}/status?status=${newStatus}`,
                    success: function (response) {
                        // İşlem başarılı
                        console.log('Durum güncellendi:', response);
                    },
                    error: function () {
                        // Hata durumunda
                        alert('Durum güncellenemedi.');
                    }
                });
            }

            // Button işlemine uygun düzenleme
            const buttons = document.querySelectorAll('button[data-todo-id]'); // Butonları seç
            buttons.forEach(button => {
                button.addEventListener('click', function () {
                    const todoId = button.getAttribute('data-todo-id'); // Butonun "data-todo-id" değerini al
                    console.log(todoId); // Bu doğru bir id değeri döndürmelidir
                });
            });
        });
               document.addEventListener('DOMContentLoaded', function () {
            const commentButtons = document.querySelectorAll('.comment-btn');
            const saveCommentButton = document.getElementById('saveCommentBtn');
            commentButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const todoId = this.getAttribute('data-todo-id');
                    document.getElementById('todoId').value = todoId;
                    fetch(`https://localhost:44305/api/Todo/${todoId}/comments/latest`)
                        .then(response => response.json())
                        .then(data => {
                            if (data && data.comment) {
                                document.getElementById('comment').value = data.comment;
                            }
                        })
                        .catch(error => {
                            console.error('Yorum alınamadı:', error);
                        });
                    $('#commentModal').modal('show');
                });
            });

            if (saveCommentButton) {
                saveCommentButton.addEventListener('click', submitComment);
            }
            const closeModalButton = document.querySelector('.close');
            if (closeModalButton) {
                closeModalButton.addEventListener('click', function () {
                    $('#commentModal').modal('hide')
                });
            }
        });
                     function submitComment() {
            const todoId = document.getElementById('todoId').value;
            const comment = document.getElementById('comment').value.trim();

            if (!comment) {
                alert('Yorum alanı boş olamaz!');
                return;
            }

            fetch(`https://localhost:44305/api/Todo/${todoId}/description`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify(comment)  
            })
            .then(response => {
             
                if (!response.ok) {
                    return response.text().then(text => { throw new Error(text) });
                }

                if (response.status === 204) {

                    alert('Yorum başarıyla kaydedildi!');
                    $('#commentModal').modal('hide');
                     window.location.reload();
                    return; 
                }
                return response.json();
            })
            .then(data => {
                if (data) {
                    alert('Yorum başarıyla kaydedildi!');
                    console.log('Kaydedilen yorum:', data);
                }
            })
            .catch(error => {
                console.error('Hata:', error);
                alert(`Bir hata oluştu: ${error.message}`);
            });
        }
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

</body>
</html>
